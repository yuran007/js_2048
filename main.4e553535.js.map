{"version":3,"sources":["scripts/main.js"],"names":["button","document","querySelector","gameScore","cells","body","querySelectorAll","messageStart","messageWin","messageLose","makeState","cellsBoard","Array","from","map","cell","index","x","y","Math","floor","value","Number","innerText","state","clickHandler","e","addEventListener","keyUpHandler","className","classList","toggle","resetCells","setTwoOrFour","key","isWin","arrowLeft","isLose","arrowRight","arrowDown","arrowUp","size","log2","length","getRandomZeroCell","stateBoard","filterZero","board","filter","random","updateState","newCell","getCellIndex","cellIndex","classCell","cell1","makeRow","filtered","row","concat","fill","makeCellsAndUpdate","newCells","item","newRow","newValue","mergeRow","col","gameBoard","includes","removeEventListener","canMoveLeftOrRight","canMoveUpOrDown","forEach","canMove","filterZeroByRow","filterZeroByCol","mergeCol"],"mappings":"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","file":"main.4e553535.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst button = document.querySelector('button');\nconst gameScore = document.querySelector('.game-score');\nconst cells = document.body.querySelectorAll('.field-cell');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\nconst makeState = (cellsBoard) =>\n  Array.from(cellsBoard)\n    .map((cell, index) =>\n      ({\n        x: index % 4,\n        y: Math.floor(index / 4),\n        value: Number(cell.innerText),\n      }));\n\nlet state = makeState(cells);\n\nconst clickHandler = (e) => {\n  document.body.addEventListener('keyup', keyUpHandler);\n\n  if (button.innerText === 'Start') {\n    button.innerText = 'Restart';\n    button.className = 'button restart';\n    messageStart.classList.toggle('hidden');\n  } else {\n    gameScore.innerText = 0;\n  }\n  messageWin.className = 'message message-win hidden';\n  messageLose.className = 'message message-lose hidden';\n  resetCells(cells);\n\n  state = makeState(cells);\n  setTwoOrFour(state);\n  setTwoOrFour(state);\n};\n\nconst keyUpHandler = (e) => {\n  switch (e.key) {\n    case 'ArrowLeft':\n      arrowLeft(state);\n\n      if (isWin(state)) {\n        return;\n      };\n      setTwoOrFour(state);\n      isLose(state);\n      break;\n\n    case 'ArrowRight':\n      arrowRight(state);\n\n      if (isWin(state)) {\n        return;\n      };\n      setTwoOrFour(state);\n      isLose(state);\n      break;\n\n    case 'ArrowDown':\n      arrowDown(state);\n\n      if (isWin(state)) {\n        return;\n      };\n      setTwoOrFour(state);\n      isLose(state);\n      break;\n\n    case 'ArrowUp':\n      arrowUp(state);\n\n      if (isWin(state)) {\n        return;\n      };\n      setTwoOrFour(state);\n      isLose(state);\n      break;\n\n    default:\n      break;\n  }\n};\n\nbutton.addEventListener('click', clickHandler);\n\nconst size = Math.log2(cells.length);\n\nfunction getRandomZeroCell(stateBoard) {\n  const filterZero = (board) =>\n    board.filter(cell => cell.value === 0);\n  const randomIndex = () =>\n    Math.floor(Math.random() * filterZero(stateBoard).length);\n\n  return filterZero(stateBoard)[randomIndex()];\n}\n\nfunction updateState(stateBoard, newCell) {\n  const getCellIndex = (cell) => cell.x + cell.y * size;\n  const cellIndex = getCellIndex(newCell);\n\n  stateBoard[cellIndex].value = newCell.value;\n\n  cells[cellIndex].innerText = (newCell.value === 0)\n    ? ''\n    : newCell.value;\n\n  const classCell = (newCell.value === 0)\n    ? 'field-cell'\n    : `field-cell field-cell--${newCell.value}`;\n\n  cells[cellIndex].className = classCell;\n}\n\nfunction setTwoOrFour(stateBoard) {\n  const filterZero = (board) =>\n    board\n      .map(cell => cell.value)\n      .filter(cell => cell === 0);\n  const getRandomCellValue = () => Math.random() > 0.1 ? 2 : 4;\n\n  if (filterZero(stateBoard).length > 0) {\n    const cell1 = getRandomZeroCell(stateBoard);\n\n    cell1.value = getRandomCellValue();\n\n    updateState(stateBoard, cell1);\n  }\n}\n\nfunction arrowLeft(stateBoard) {\n  for (let row = 0; row < size; row++) {\n    const filterZero = (board) =>\n      board.filter(cell => cell.y === row && cell.value !== 0)\n        .map(cell => cell.value);\n    const makeRow = (board) => {\n      const filtered = filterZero(board);\n\n      return filtered\n        .concat(Array(size - filtered.length).fill(0));\n    };\n    const mergeRow = (newCells) => {\n      for (let cell = 0; cell < newCells.length - 1; cell++) {\n        if (newCells[cell] === newCells[cell + 1]) {\n          const newValue = newCells[cell] * 2;\n\n          newCells[cell] = newValue;\n          newCells[cell + 1] = 0;\n          gameScore.innerText = `${Number(gameScore.innerText) + newValue}`;\n        }\n      }\n    };\n    const makeCellsAndUpdate = (newCells) =>\n      newCells\n        .map((item, index) => (\n          updateState(stateBoard,\n            {\n              x: index,\n              y: row,\n              value: item,\n            })));\n\n    let newRow = makeRow(stateBoard);\n\n    mergeRow(newRow);\n    makeCellsAndUpdate(newRow);\n\n    newRow = makeRow(stateBoard);\n    makeCellsAndUpdate(newRow);\n  }\n}\n\nfunction arrowRight(stateBoard) {\n  for (let row = 0; row < size; row++) {\n    const filterZero = (board) =>\n      board.filter(cell => cell.y === row && cell.value !== 0)\n        .map(cell => cell.value);\n    const makeRow = (board) => {\n      const filtered = filterZero(board);\n\n      return (Array(size - filtered.length).fill(0)).concat(filtered);\n    };\n    const mergeRow = (newCells) => {\n      for (let cell = 0; cell < newCells.length - 1; cell++) {\n        if (newCells[cell] === newCells[cell + 1]) {\n          const newValue = newCells[cell] * 2;\n\n          newCells[cell] = newValue;\n          newCells[cell + 1] = 0;\n          gameScore.innerText = `${Number(gameScore.innerText) + newValue}`;\n        }\n      }\n    };\n    const makeCellsAndUpdate = (newCells) =>\n      newCells\n        .map((item, index) => (\n          updateState(stateBoard,\n            {\n              x: index,\n              y: row,\n              value: item,\n            })));\n\n    let newRow = makeRow(stateBoard);\n\n    mergeRow(newRow);\n    makeCellsAndUpdate(newRow);\n\n    newRow = makeRow(stateBoard);\n    makeCellsAndUpdate(newRow);\n  }\n}\n\nfunction arrowDown(stateBoard) {\n  for (let col = 0; col < size; col++) {\n    const filterZero = (board) =>\n      board.filter(cell => cell.x === col && cell.value !== 0)\n        .map(cell => cell.value);\n    const makeRow = (board) => {\n      const filtered = filterZero(board);\n\n      return (Array(size - filtered.length).fill(0)).concat(filtered);\n    };\n    const mergeRow = (newCells) => {\n      for (let cell = 0; cell < newCells.length - 1; cell++) {\n        if (newCells[cell] === newCells[cell + 1]) {\n          const newValue = newCells[cell] * 2;\n\n          newCells[cell] = newValue;\n          newCells[cell + 1] = 0;\n          gameScore.innerText = `${Number(gameScore.innerText) + newValue}`;\n        }\n      }\n    };\n    const makeCellsAndUpdate = (newCells) =>\n      newCells\n        .map((item, index) => (\n          updateState(stateBoard,\n            {\n              x: col,\n              y: index,\n              value: item,\n            })));\n\n    let newRow = makeRow(stateBoard);\n\n    mergeRow(newRow);\n    makeCellsAndUpdate(newRow);\n\n    newRow = makeRow(stateBoard);\n    makeCellsAndUpdate(newRow);\n  }\n}\n\nfunction arrowUp(stateBoard) {\n  for (let col = 0; col < size; col++) {\n    const filterZero = (board) =>\n      board.filter(cell => cell.x === col && cell.value !== 0)\n        .map(cell => cell.value);\n    const makeRow = (board) => {\n      const filtered = filterZero(board);\n\n      return filtered.concat(Array(size - filtered.length).fill(0));\n    };\n    const mergeRow = (newCells) => {\n      for (let cell = 0; cell < newCells.length - 1; cell++) {\n        if (newCells[cell] === newCells[cell + 1]) {\n          const newValue = newCells[cell] * 2;\n\n          newCells[cell] = newValue;\n          newCells[cell + 1] = 0;\n          gameScore.innerText = `${Number(gameScore.innerText) + newValue}`;\n        }\n      }\n    };\n    const makeCellsAndUpdate = (newCells) =>\n      newCells\n        .map((item, index) => (\n          updateState(stateBoard,\n            {\n              x: col,\n              y: index,\n              value: item,\n            })));\n\n    let newRow = makeRow(stateBoard);\n\n    mergeRow(newRow);\n    makeCellsAndUpdate(newRow);\n\n    newRow = makeRow(stateBoard);\n    makeCellsAndUpdate(newRow);\n  }\n}\n\nfunction isWin(gameBoard) {\n  if (gameBoard.map(cell => cell.value).includes(2048)) {\n    messageWin.classList.toggle('hidden');\n    document.body.removeEventListener('keyup', keyUpHandler);\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction isLose(gameBoard) {\n  const filterZero = gameBoard\n    .map(cell => cell.value)\n    .filter(cell => cell === 0);\n\n  const canNotMove = filterZero.length === 0\n  && !canMoveLeftOrRight(gameBoard)\n  && !canMoveUpOrDown(gameBoard);\n\n  if (canNotMove) {\n    messageLose.classList.toggle('hidden');\n    document.body.removeEventListener('keyup', keyUpHandler);\n  }\n}\n\nfunction resetCells(cellsBoard) {\n  cellsBoard.forEach(cell => {\n    cell.innerText = '';\n    cell.className = 'field-cell';\n  });\n}\n\nfunction canMoveLeftOrRight(stateBoard) {\n  let canMove = false;\n\n  for (let row = 0; row < size; row++) {\n    const filterZeroByRow = (board) =>\n      board.filter(cell => cell.y === row && cell.value !== 0)\n        .map(cell => cell.value);\n    const mergeRow = (newCells) => {\n      for (let cell = 0; cell < newCells.length - 1; cell++) {\n        if (newCells[cell] === newCells[cell + 1]) {\n          canMove = true;\n        }\n      }\n    };\n\n    mergeRow(filterZeroByRow(stateBoard));\n  }\n\n  return canMove;\n}\n\nfunction canMoveUpOrDown(stateBoard) {\n  let canMove = false;\n\n  for (let col = 0; col < size; col++) {\n    const filterZeroByCol = (board) =>\n      board.filter(cell => cell.x === col && cell.value !== 0)\n        .map(cell => cell.value);\n    const mergeCol = (newCells) => {\n      for (let cell = 0; cell < newCells.length - 1; cell++) {\n        if (newCells[cell] === newCells[cell + 1]) {\n          canMove = true;\n        }\n      }\n    };\n\n    mergeCol(filterZeroByCol(stateBoard));\n  }\n\n  return canMove;\n}\n"]}